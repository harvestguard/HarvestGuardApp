name: Build To Release

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Release new apk
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all tags and branches
          
      - name: Generate unique version tag
        id: generate-tag
        run: |
          # Get current date parts
          current_year=$(date +'%Y')
          year_delta=$((current_year - 2024))
          day=$(date +'%d')
          month=$(date +'%m')
          daymonth="${day}${month}"
          
          # Get the latest tag, default to v0.0.0 if no tags exist
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $latest_tag"
          
          # Extract version numbers from latest tag (expected format: vYEAR.DAYMONTH.PATCH)
          version=$(echo $latest_tag | sed 's/v//' | cut -d'-' -f1)
          IFS='.' read -ra VERSION_PARTS <<< "$version"
          prev_year=${VERSION_PARTS[0]:-0}
          prev_daymonth=${VERSION_PARTS[1]:-0}
          prev_patch=${VERSION_PARTS[2]:-0}
          
          # Determine patch version: if the year and daymonth parts match, increment; otherwise start at 1
          if [ "$prev_year" -eq "$year_delta" ] && [ "$prev_daymonth" = "$daymonth" ]; then
            new_patch=$((prev_patch + 1))
          else
            new_patch=1
          fi
          
          # Build new version and tag strings
          new_version="$year_delta.$daymonth.$new_patch"
          new_tag="v$new_version"
          
          # Export variables
          echo "NEW_TAG=$new_tag" >> $GITHUB_ENV
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV
          echo "New tag will be: $new_tag"
          echo "New version will be: $new_version"

      - name: Update version in pubspec.yaml
        run: |
          sed -i "s/^version: .*/version: ${{ env.NEW_VERSION }}/" pubspec.yaml
          cat pubspec.yaml | grep version:

      - uses: actions/setup-java@v3.12.0
        with:
          distribution: 'oracle'
          java-version: '17'

      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - run: flutter pub get
      - run: flutter build apk --release

      - name: Rename release APK
        run: |
          # Adjust the source file path if your APK name or path differs.
          apk_source="build/app/outputs/apk/release/app-release.apk"
          apk_destination="build/app/outputs/apk/release/HarvestGuard-v${{ env.NEW_VERSION }}.apk"
          if [ -f "$apk_source" ]; then
            mv "$apk_source" "$apk_destination"
            echo "Renamed APK to $apk_destination"
          else
            echo "APK file not found at $apk_source"
            exit 1
          fi

      - name: Create Changelog
        id: changelog
        run: |
          echo "Creating changelog..."
          # Write header with title and generation timestamp
          echo "# Changelog" > CHANGELOG.md
          echo " Release date: $(date +'%Y-%m-%d %H:%M:%S')" >> CHANGELOG.md
          echo " Version: ${{ env.NEW_VERSION }}" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log $(git describe --tags --abbrev=0 @^)..HEAD --pretty=format:"- **[%h](https://github.com/${{ github.repository }}/commit/%H)** %s" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "Changelog created."

      - name: Push to Releases
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/app/outputs/apk/release/*"
          tag: ${{ env.NEW_TAG }}
          bodyFile: CHANGELOG.md
          token: ${{ secrets.TOKEN }}