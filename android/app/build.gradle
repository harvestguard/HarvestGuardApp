plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}


def sPassword = 'HarvestGuard@Password'
def kAlias = 'HarvestGuard@KeyAlias'
def kPassword = 'HarvestGuard@Password'

android {
    namespace = "com.example.harvest_guard_app"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.example.harvest_guard_app"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = 31
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }
    signingConfigs {
        release {
            storeFile file("keystore/release.jks")
            storePassword sPassword
            keyAlias kAlias
            keyPassword kPassword
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.release
        }
        release {
            shrinkResources true
            minifyEnabled true
            signingConfig signingConfigs.release
        }
    }
}

task generateKeystore() {
    onlyIf {
        !file('keystore/release.jks').exists()
    }
    doLast {
        exec {
            workingDir projectDir
            commandLine 'mkdir', '-p', 'keystore'
        }
        exec {
            workingDir projectDir
            commandLine 'keytool', '-genkey', '-noprompt', '-keystore', 'keystore/release.jks',
                '-alias', kAlias, '-storepass', sPassword, '-keypass', kPassword, '-dname', 'c=RU',
                '-keyalg', 'RSA', '-keysize', '2048', '-validity', '10000'
        }
    }
}


project.afterEvaluate {
    preBuild.dependsOn generateKeystore
}

flutter {
    source = "../.."
}
